@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">
	<EditForm Model="@Film" OnValidSubmit="@OnFormSubmit" class=" p-3 mb-5 border border-1 border-secondary p-2 w-50" style="max-width:565px!important;">
		<DataAnnotationsValidator />
		<h4>@Page Film</h4>
		<div class="mb-3">

			@if (Page.Equals(PageType.Delete)) //disable title field if crud-option is delete
			{
				<InputText id="title" class="form-control me-2" @bind-Value="Film.Title" disabled placeholder="Title"></InputText>
			}
			else
			{
				<label>Title</label>
				<InputText id="title" class="form-control me-2" @bind-Value="Film.Title" placeholder="Title"></InputText>
			}
			<ValidationMessage For="@(() => Film.Title)" />
		</div>
		@if (!Page.Equals(PageType.Delete))
		{
			<div class="mb-3">
				@*<label>title of field</label>*@
				<label>Description</label>

				<InputText id="description" class="form-control me-2" @bind-Value="Film.Description" placeholder="Description"></InputText>
				<ValidationMessage For="@(() => Film.Description)" />
			</div>
			<div class="mb-3 d-flex flex-column">
				<label>Release date</label>

				<InputDate @bind-value="Film.Released" TValue="DateTime" placeholder="Release Date" ValueExpression="@(() => Film.Released)"></InputDate>
				<ValidationMessage For="@(() => Film.Released)" />
			</div>
			<div class="mb-3">
				<label>Film URL</label>

				<InputText id="marquee-image-url" class="form-control me-2" @bind-Value="Film.FilmUrl" placeholder="FilmUrl"></InputText>
				<ValidationMessage For="@(() => Film.FilmUrl)" />
			</div>

			//dropdown
			<label>Director</label>

			<InputSelect @bind-Value="Film.DirectorId" class="form-control mb-3">
				<option value=0>...</option>
				@foreach (var director in Directors)
				{
					<option value="@director.Id">@director.Name</option>

				}
			</InputSelect>
			@*<div class="mb-3">
		<ul>
		@foreach (var genre in Film.Genres)
		{
		<li>@genre.Name</li>
		}
		</ul>
		</div>*@
			<label>Genres</label>

			<div class="d-flex flex-wrap justify-content-between mb-2">
				@foreach (var genre in AllGenres)
				{
					int index = Film.Genres.FindIndex(g => g.Id == genre.Id);
					<button type="button" class="btn btn-small btn@(index >= 0 ? "" : "-outline")-primary btn-toggle-genre rounded-pill m-1" value="@genre.Id" @onclick="@(()=> ToggleGenre(genre.Id))">
						<p class="small m-0 p-0 fw-bold">
							@genre.Name
						</p>
					</button>
				}
			</div>
			<button type="button" class="btn d-flex align-content-center p-0 btn-toggle-similar" @onclick="@(()=> ShowSimilarFilms = !ShowSimilarFilms)">
				<p class="fw-bold p-1 text-primary mb-0">
					Similar films
				</p>
				<span class="oi oi-chevron-@(ShowSimilarFilms ?"top":"bottom") p-1 text-primary"></span>
			</button>
			@if (ShowSimilarFilms)
			{
				<div class="d-flex flex-column">

				@foreach (var similarFilm in Film.SimilarFilms)
				{
					
					int index = Film.SimilarFilms.FindIndex(f => f.Similar.Id == similarFilm.SimilarFilmId);

					{
						<button type="button" class="btn btn-small btn@(index >= 0 ? "" : "-outline")-primary btn-toggle-genre rounded-pill m-1" value="@similarFilm.SimilarFilmId" @onclick="@(()=> ToggleSimilarFilm(similarFilm.SimilarFilmId))">
							<p class="small m-0 p-0 fw-bold">
								@similarFilm.Similar.Title
							</p>
						</button>
					}
				}
				</div>
				<div class="d-flex  mb-2">

					<InputText id="similar-film-search" class="form-control me-2" @bind-Value="SearchTerm" placeholder="Enter film title to search"></InputText>
					<button type="button" class="btn btn-primary rounded-0" @onclick="@(()=>UpdateSearch(SearchTerm))">Search</button>
				</div>
				@if (FilteredFilms.Count != 0)
				{
					<div class="d-flex flex-column">
						@foreach (var film in FilteredFilms)
						{
							int index = Film.SimilarFilms.FindIndex(f => f.Similar.Id == film.Id);
							@if (film.Id != Film.Id)
							{
								<button type="button" class="btn btn-small btn@(index >= 0 ? "" : "-outline")-primary btn-toggle-genre rounded-pill m-1" value="@film.Id" @onclick="@(()=> ToggleSimilarFilm(film.Id))">
									<p class="small m-0 p-0 fw-bold">
										@film.Title
									</p>
								</button>
							}
						}
					</div>
				}
			}
			<div class="mb-3 mt-4">
				<label>
					Free
				</label>
				<InputCheckbox @bind-Value="Film.Free" />
			</div>
		}
		<button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
	</EditForm>
</div>


@code {

	[Parameter] public FilmDTO Film { get; set; } = new();

	List<DirectorDTO> Directors { get; set; } = new();
	List<GenreBaseDTO> AllGenres { get; set; } = new();

	List<FilmDTO> FilteredFilms { get; set; } = new();
	List<FilmDTO> FilmList { get; set; } = new();

	bool ShowSimilarFilms = false;
	string SearchTerm = "";

	[Parameter] public string Page { get; set; } = string.Empty;
	[Parameter] public EventCallback<string> OnChange { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Directors = await AdminService.GetAsync<DirectorDTO>("directors");
		AllGenres = await AdminService.GetAsync<GenreBaseDTO>("genres");
		AllGenres = AllGenres.OrderBy(g => g.Name).ToList();
	}
	private async Task OnFormSubmit()
	{
		try
		{
			if (Page.Equals(PageType.Create))
			{
				await AdminService.CreateAsync<FilmDTO>("films", Film);
				FilmList = await AdminService.GetAsync<FilmDTO>("films");
				foreach (var film in FilmList)
				{
					if (film.Title == Film.Title)
					{
						Film.Id = film.Id;
					}
				}
				await SetGenres("create");
				await SetSimilarFilms("create");

			}
			else if (Page.Equals(PageType.Edit))
			{
				await SetGenres("edit");
				await SetSimilarFilms("edit");
				await AdminService.UpdateAsync<FilmDTO>($"films/{Film.Id}", Film);
			}
			else if (Page.Equals(PageType.Delete))
			{
				
				SimilarFilmCreateDTO SimilarFilm = new();

				foreach (var film in Film.SimilarFilms)
					{
						SimilarFilm.FilmId = Film.Id;
						SimilarFilm.SimilarFilmId = film.SimilarFilmId;
						await AdminService.DeleteAsync<SimilarFilmCreateDTO>("similarfilms", SimilarFilm);
						SimilarFilm.FilmId = film.SimilarFilmId;
						SimilarFilm.SimilarFilmId = Film.Id;
						await AdminService.DeleteAsync<SimilarFilmCreateDTO>("similarfilms", SimilarFilm);
					}
					await AdminService.DeleteAsync<FilmDTO>($"films/{Film.Id}");

			}
				await OnChange.InvokeAsync("");
		}
		catch
		{
			await OnChange.InvokeAsync("Couldn't create/edit/delete the film.");
		}
	}
	private async Task ToggleGenre(int id)
	{
		try
		{
			int index = Film.Genres.FindIndex(g => g.Id == id);
			if (index >= 0)
			{
				Film.Genres.RemoveAll(g => g.Id == id);
			}
			else Film.Genres.Add(AllGenres[AllGenres.FindIndex(g => g.Id == id)]); //
		}
		catch (Exception ex)
		{
			await OnChange.InvokeAsync($"{ex}");
		}
	}
	private async Task ToggleSimilarFilm(int id)
	{
		try
		{
			int index = Film.SimilarFilms.FindIndex(f => f.Similar.Id == id);
			if (index >= 0)
			{
				Film.SimilarFilms.RemoveAll(f => f.Similar.Id == id);
			}


			else
			{
				FilmDTO similarFilmToAdd = await AdminService.SingleAsync<FilmDTO>($"films/{id}");
				SimilarFilmBaseDTO similarFilm = new()
					{
						FilmId = Film.Id,
						SimilarFilmId = id,
						Similar = similarFilmToAdd
					};
				Film.SimilarFilms.Add(similarFilm);
			}
		}
		catch (Exception ex)
		{
			await OnChange.InvokeAsync($"{ex}");
		}
	}
	private async Task SetGenres(string CreateOrEdit)
	{
		FilmGenreDTO FilmGenre = new();
		if (CreateOrEdit == "edit")
		{
			FilmDTO OldFilm = await AdminService.SingleAsync<FilmDTO>($"films/{Film.Id}");
			List<GenreBaseDTO> OldGenres = OldFilm.Genres;
			//rensa gamla genre-kopplingar till filmen, skapa nya baserat på valen i formuläret
			if (OldFilm.Genres.Count != 0)
			{
				foreach (var genre in OldGenres)
				{
					FilmGenre.GenreId = genre.Id;
					FilmGenre.FilmId = Film.Id;
					await AdminService.DeleteAsync<FilmGenreDTO>("filmgenres", FilmGenre);
				}
			}
			foreach (var genre in Film.Genres)
			{
				FilmGenre.GenreId = genre.Id;
				FilmGenre.FilmId = Film.Id;
				await AdminService.CreateAsync<FilmGenreDTO>("filmgenres", FilmGenre);
			}
		}
		else
		{
			foreach (var genre in Film.Genres)
			{
				FilmGenre.GenreId = genre.Id;
				FilmGenre.FilmId = Film.Id;
				await AdminService.CreateAsync<FilmGenreDTO>("filmgenres", FilmGenre);
			}
		}
	}
	private async Task SetSimilarFilms(string CreateOrEdit)
	{

		SimilarFilmCreateDTO SimilarFilm = new();
		if (CreateOrEdit == "edit")
		{

			FilmDTO OldFilm = await AdminService.SingleAsync<FilmDTO>($"films/{Film.Id}");
			//rensa gamla film-kopplingar till filmen, skapa nya baserat på valen i formuläret
			if (OldFilm.SimilarFilms.Count != 0)
			{
				foreach (var film in OldFilm.SimilarFilms)
				{
					SimilarFilm.FilmId = OldFilm.Id;
					SimilarFilm.SimilarFilmId = film.SimilarFilmId;
					await AdminService.DeleteAsync<SimilarFilmCreateDTO>("similarfilms", SimilarFilm);
					SimilarFilm.FilmId = film.SimilarFilmId;
					SimilarFilm.SimilarFilmId = OldFilm.Id;
					await AdminService.DeleteAsync<SimilarFilmCreateDTO>("similarfilms", SimilarFilm);
				}
			}
			foreach (var film in Film.SimilarFilms)
			{
				SimilarFilm.FilmId = OldFilm.Id;
				SimilarFilm.SimilarFilmId = film.SimilarFilmId;
				await AdminService.CreateAsync<SimilarFilmCreateDTO>("similarfilms", SimilarFilm);
				SimilarFilm.FilmId = film.SimilarFilmId;
				SimilarFilm.SimilarFilmId = OldFilm.Id;
				await AdminService.CreateAsync<SimilarFilmCreateDTO>("similarfilms", SimilarFilm);
			}
		}
		else
		{
			foreach (var film in Film.SimilarFilms)
			{
				SimilarFilm.FilmId = Film.Id;
				SimilarFilm.SimilarFilmId = film.SimilarFilmId;
				await AdminService.CreateAsync<SimilarFilmCreateDTO>("similarfilms", SimilarFilm);
				SimilarFilm.FilmId = film.SimilarFilmId;
				SimilarFilm.SimilarFilmId = Film.Id;
				await AdminService.CreateAsync<SimilarFilmCreateDTO>("similarfilms", SimilarFilm);
			}
		}
	}
	private async Task UpdateSearch(string search)
	{
		FilteredFilms = await AdminService.GetAsync<FilmDTO>("films");
		FilteredFilms = FilteredFilms.Where(f => f.Title.ToLower().Contains(search.ToLower())).ToList();
	}
}