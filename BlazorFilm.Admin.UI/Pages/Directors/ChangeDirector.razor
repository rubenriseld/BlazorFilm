@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">
	<EditForm Model="@Director" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
		<DataAnnotationsValidator />
		<h4>@Page Director</h4>
		<div class="mb-3">

			@if (Page.Equals(PageType.Delete)) //disable title field if crud-option is delete
			{
				<InputText id="name" class="form-control me-2" @bind-Value="Director.Name" disabled placeholder="Name"></InputText>
			}
			else
			{
				<InputText id="name" class="form-control me-2" @bind-Value="Director.Name" placeholder="Name"></InputText>
			}
			<ValidationMessage For="@(() => Director.Name)" />
		</div>
		<button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
	</EditForm>
</div>


@code {

	[Parameter] public DirectorDTO Director { get; set; } = new();
	[Parameter] public string Page { get; set; } = string.Empty;
	[Parameter] public EventCallback<string> OnChange { get; set; }

	private async Task OnFormSubmit()
	{
		try
		{
			if (Page.Equals(PageType.Create))
				await AdminService.CreateAsync<DirectorDTO>("directors", Director);
			else if (Page.Equals(PageType.Edit))
				await AdminService.UpdateAsync<DirectorDTO>($"directors/{Director.Id}", Director);
			else if (Page.Equals(PageType.Delete))
				await AdminService.DeleteAsync<DirectorDTO>($"directors/{Director.Id}");

			await OnChange.InvokeAsync("");
		}
		catch
		{
			await OnChange.InvokeAsync("Couldn't create/edit/delete the director.");
		}
	}
}